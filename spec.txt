# MDX

> Markdown üíõ JSX

> This document is currently in progress.
> See also [micromark][], [cmsm][], and [mdxjs][].

## Contents

## Background

### What is MDX?

MDX is the combination of [Markdown][commonmark] with [JSX][].
This document defines a syntax for MDX (without JavaScript, [MDXjs][] does
that) by describing how to parse it.

### Who created MDX?

The idea of combining [Markdown][commonmark], [JavaScript][], and [JSX][] was
a collaborative effort by [Guillermo Rauch][mdx-rauchg] (**[@rauchg][]**),
[James K. Nelson][mdx-jamesknelson] (**[@jamesknelson][]**), [John
Otander][mdx-johno] (**[@johno][]**), Tim Neutkens (**[@timneutkens][]**),
Brent Jackson (**[@jxnblk][]**), Jessica Stokes (**[@ticky]**), and more.
Markdown was [created by John Gruber][md] (**[@gruber][]**).
[CommonMark by John McFarlane et al.][commonmark] (**[@jgm][]**) is a popular
variant.
JSX was [created by Sebastian Markb√•ge et al.][jsx] (**[@sebmarkbage][]**) at
Facebook, Inc.

### Why MDX?

Markdown does not have a syntax for custom components.
MDX solves this.

There are many languages objectively better than Markdown, however, Markdown
is great because:

*   It looks like what it means and is relatively easy to read
*   Although images are [confusing][], most stuff is relatively simple to write
*   It‚Äôs loose and ambiguous: it may not work but you won‚Äôt get an error (great
    for someone posting a comment to a forum if they forgot an asterisk)

Markdown *does* have a way to extend it, HTML, but that has drawbacks:

*   HTML in Markdown is na√Øve, how it‚Äôs parsed sometimes doesn‚Äôt make sense
*   HTML is unsafe by default, so it‚Äôs sometimes (partially) unsupported
*   HTML and Markdown don‚Äôt mix well, resulting in confusing rules such as
    blank lines or `markdown="1"` attributes
*   HTML is coupled with browsers, Markdown is useful for other things too

The frontend world has an alternative to HTML: JSX.
JSX is great, amongst other things, because:

*   It has a relatively familiar syntax (like XML)
*   It‚Äôs agnostic to semantics and intended for compilers (can have any
    domain-specific meaning)
*   It‚Äôs strict and unambiguous (great if an editor forgot a slash somewhere, as
    they‚Äôll get an error early, instead of a book going to print with broken
    stuff in it)

## Overview

TODO: some stuff about a part for authors (next section) and a part for
developers (rest of doc).

## MDX

TODO: MDX for authors.

## Parsing

The states of the [MDX state machine][] have certain effects, such as that they
create tokens in the [stack][] and [consume][] characters.
The purpose of the state machine is to tokenize.
The stack is used by adapters.

The [MDX adapter][] handles tokens, which has further effects, such as
validating whether they are conforming and figuring out when parsing is done.
The purpose of the adapter is to handle the results of the tokenizer.

To parse MDX is to feed the [input character][] to the [state][] of the state
machine, and when not [settled][], repeat this step.

If parsing [crashed][] with a label the content is nonsensical and the document
cannot be processed.
Without label, no MDX was found.

How MDX, whether it‚Äôs found or not, is handled is intentionally undefined and
left up to the host parser.
When to feed an [c:EOF] is similarly undefined.

### Characters

A character is a Unicode code point and is represented as a four to six digit
hexadecimal number, prefixed with `U+` (**\[UNICODE]**).

#### Character groups

[Whitespace](#) is any character defined as [`WhiteSpace`][es-whitespace]
(**\[JavaScript]**).

[Identifier start](#) is any character defined as
[`IdentifierStart`][es-identifier-start], with the restriction that unicode
escape sequences do not apply (**\[JavaScript]**).

[Identifier](#) is any character defined as
[`IdentifierPart`][es-identifier-part], with the restriction that unicode escape
sequences do not apply (**\[JavaScript]**).

#### Conceptual characters

An [c:EOF](#) character is a conceptual character (as in, not real character)
representing the lack of any further characters in the input.

### Infra

The [input stream](#) consists of the characters pushed into it.

The [input character](#) is the first character in the [input stream][] that has
not been consumed.
Initially, the input character is the first character in the input.
Finally, when all character are consumed, the input character is an [c:EOF][].

The [stack](#) is a list of tokens that are open, initially empty.
The [current token](#) is the last token in the [stack][].

The [value](#) of a token are all characters in the [input stream][] from where
the token was [enter][]ed (including) to where it [exit][]ed (excluding).

The [element stack](#) is a list of elements that are open, initially empty.
The [current element](#) is the last element in the [element stack][].

[Settled](#) is used to signal when parsing is done, whether it was a success
or not, and is initially off.
[Crashed](#) is used to signal when parsing is unsuccessful, and is initially
off.

The [state](#) is the way a character is handled.

A variable is declared with `let`, cleared with `unset`, or changed with
`set` (to set a value), `increment` (to add a numeric value), `decrement` (to
subtract a numeric value), `append` (to add a string value), `push` (to add a
value to a list), or `pop` (to remove a value from the end of a list).

Which values are used are left to the host programming language, but this
definition requires compatibility with **\[JSON]** for primitives (strings,
numbers, booleans, and null) and structured types (objects and arrays).

The [shared space](#) is an object.
`size`, `sizeOpen`, `currentAttribute`, and `currentTag` are variables in the
[shared space][].
These variables are available globally to all states and adapters.
Other variables are available locally to a state or adapter and not shared.

To [dedent](#) is to remove up to X initial c:HT or c:SP characters from each
non-initial line in the given value, where X is the minimum number of c:HT or
c:SP characters of all non-initial lines that contain other characters.

To [decode](#) is to parse character references as defined in ‚ÄúCharacter
reference state‚Äù of ¬ß 12.2 Parsing HTML documents (**\[HTML]**).

### Effects

The [MDX state machine][] and [MDX adapter][] have certain common effects.

#### Switch

To [switch](#) to a state is to wait for a character in the given state.

#### Consume

To [consume](#) the [input character][] is to move on from it to the next
character in the [input stream][].

#### Enter

To [enter](#) a token is to push a new token of the given type to the [stack][],
making it the [current token][].

#### Exit

To [exit](#) is to pop the [current token][] from the [stack][].

#### Done

[Done](#) is used to mark parsing as [settled][].

#### Crash

[Crash](#) is used to mark parsing as [settled][] and [crashed][].
When crashing with a given label, crashing causes a parse error.

## State machine

The [MDX state machine](#) is used to tokenize MDX blocks and MDX spans.
Blocks (also known as flow) make up the structure of the document (such as
headings), whereas spans (also known as text or inline) make up the
intra-paragraph parts of the flow (such as emphasis).

The initial state varies based on whether flow or text is parsed, and is
respectively either s:before-mdx-block or s:before-mdx-span.

The final state is switched to by the [MDX adapter][], which right before
completion will [switch][] to either s:after-mdx-block or s:after-mdx-span.

### Before MDX block state

*   ‚Ü™ **c:HT**\
    ‚Ü™ **c:SP**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Switch][] to s:before-mdx-span

### Before MDX span state

*   ‚Ü™ **c:<**\
    ‚Ü™ **c:{**

    [Switch][] to s:data
*   ‚Ü™ **Anything else**

    [Crash][]

### After MDX block state

*   ‚Ü™ **c:HT**\
    ‚Ü™ **c:SP**

    [Consume][]
*   ‚Ü™ **[c:EOF][]**\
    ‚Ü™ **c:LF**\
    ‚Ü™ **c:CR**

    [Done][]
*   ‚Ü™ **Anything else**

    [Crash][]

### After MDX span state

[Done][]

### Data state

*   ‚Ü™ **c:<**

    [Switch][] to s:before-name, [enter][] `'tag'`, and [consume][]
*   ‚Ü™ **c:{**

    [Switch][] to s:expression, [enter][] `'expression'`, let `size` be `1`, and
    [consume][]
*   ‚Ü™ **Anything else**

    [Switch][] to s:text and [enter][] `'text'`

### Before name state

*   ‚Ü™ **c:/**

    [Switch][] to s:before-closing-tag-name, [enter][] `'closingSlash'`,
    [consume][], and [exit][]
*   ‚Ü™ **c:>**

    [Switch][] to s:data, [enter][] `'name'`, [exit][], [consume][], and
    [exit][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:primary-name, [enter][] `'name'`, [enter][] `'primaryName'`,
    and [consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before name'`

### Before closing tag name state

*   ‚Ü™ **c:>**

    [Switch][] to s:data, [enter][] `'name'`, [exit][], [consume][], and
    [exit][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:primary-name, [enter][] `'name'`, [enter][] `'primaryName'`,
    and [consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before name'`

### Primary name state

*   ‚Ü™ **c:-**\
    ‚Ü™ **[Identifier][]**

    [Consume][]
*   ‚Ü™ **c:.**\
    ‚Ü™ **c:/**\
    ‚Ü™ **c::**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Whitespace][]**

    [Switch][] to s:after-primary-name and [exit][]
*   ‚Ü™ **Anything else**

    [Crash][] `'in name'`

### After primary name state

*   ‚Ü™ **c:.**

    [Switch][] to s:before-member-name and [consume][]
*   ‚Ü™ **c::**

    [Switch][] to s:before-local-name and [consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Identifier start][]**

    [Switch][] to s:before-attribute and [exit][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after name'`

### Before member name state

*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:member-name, [enter][] `'memberName'`, and [consume][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before member name'`

### Member name state

*   ‚Ü™ **c:-**\
    ‚Ü™ **[Identifier][]**

    [Consume][]
*   ‚Ü™ **c:.**\
    ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Whitespace][]**

    [Switch][] to s:after-member-name and [exit][]
*   ‚Ü™ **Anything else**

    [Crash][] `'in member name'`

### After member name state

*   ‚Ü™ **c:.**

    [Switch][] to s:before-member-name and [consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Identifier start][]**

    [Switch][] to s:before-attribute and [exit][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after member name'`

### Before local name state

*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:local-name, [enter][] `'localName'`, and [consume][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before local name'`

### Local name state

*   ‚Ü™ **c:-**\
    ‚Ü™ **[Identifier][]**

    [Consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Whitespace][]**

    [Switch][] to s:after-local-name, [exit][], and [exit][]
*   ‚Ü™ **Anything else**

    [Crash][] `'in local name'`

### After local name state

*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Identifier start][]**

    [Switch][] to s:before-attribute
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after local name'`

### Before attribute state

*   ‚Ü™ **c:/**

    [Switch][] to s:self-closing, [enter][] `'selfClosingSlash'`, [consume][],
    and [exit][]
*   ‚Ü™ **c:>**

    [Switch][] to s:data, [consume][], and [exit][]
*   ‚Ü™ **c:{**

    [Switch][] to s:attribute-expression, [enter][] `'attributeExpression'`, let
    `size` be `1`, and [consume][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:attribute-name, [enter][] `'attributeName'`, and [consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before attribute name'`

### Attribute expression state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in attribute expression'`
*   ‚Ü™ **c:{**

    Increment `size` by `1` and [consume][]
*   ‚Ü™ **c:}**

    If `size` is:

    *   ‚Ü™ **`1`**

        [Switch][] to s:before-attribute, unset `size`, [consume][], and
        [exit][]
    *   ‚Ü™ **Anything else**

        Decrement `size` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Attribute name state

*   ‚Ü™ **c:-**\
    ‚Ü™ **[Identifier start][]**

    [Consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c::**\
    ‚Ü™ **c:=**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Whitespace][]**

    [Switch][] to s:after-attribute-name and [exit][]
*   ‚Ü™ **Anything else**

    [Crash][] `'in attribute name'`

### After attribute name state

*   ‚Ü™ **c::**

    [Switch][] to s:before-attribute-local-name and [consume][]
*   ‚Ü™ **c:=**

    [Switch][] to s:before-attribute-value and [consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Identifier start][]**

    [Switch][] to s:before-attribute
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after attribute name'`

### Before attribute local name state

*   ‚Ü™ **[Identifier start][]**

    [Switch][] to s:attribute-local-name, [enter][] `'attributeLocalName'`, and
    [consume][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before local attribute name'`

### Attribute local name state

*   ‚Ü™ **c:-**\
    ‚Ü™ **[Identifier start][]**

    [Consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:=**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Whitespace][]**

    [Switch][] to s:after-attribute-local-name and [exit][]
*   ‚Ü™ **Anything else**

    [Crash][] `'in local attribute name'`

### After attribute local name state

*   ‚Ü™ **c:=**

    [Switch][] to s:before-attribute-value and [consume][]
*   ‚Ü™ **c:/**\
    ‚Ü™ **c:>**\
    ‚Ü™ **c:{**\
    ‚Ü™ **[Identifier start][]**

    [Switch][] to s:before-attribute
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after local attribute name'`

### Before attribute value state

*   ‚Ü™ **c:"**

    [Switch][] to s:attribute-value-double-quoted, [enter][] `'attributeValue'`,
    and [consume][]
*   ‚Ü™ **c:'**

    [Switch][] to s:attribute-value-single-quoted, [enter][] `'attributeValue'`,
    and [consume][]
*   ‚Ü™ **c:{**

    [Switch][] to s:attribute-value-expression, [enter][]
    `'attributeValueExpression'`, let `size` be `1`, and [consume][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'before attribute value'`

### Attribute value double quoted state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in attribute value'`
*   ‚Ü™ **c:"**

    [Switch][] to s:before-attribute, [consume][], and [exit][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Attribute value single quoted state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in attribute value'`
*   ‚Ü™ **c:'**

    [Switch][] to s:before-attribute, [consume][], and [exit][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Attribute value expression state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in attribute value expression'`
*   ‚Ü™ **c:{**

    Increment `size` by `1` and [consume][]
*   ‚Ü™ **c:}**

    If `size` is:

    *   ‚Ü™ **`1`**

        [Switch][] to s:before-attribute, unset `size`, [consume][], and
        [exit][]
    *   ‚Ü™ **Anything else**

        Decrement `size` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Self-closing state

*   ‚Ü™ **c:>**

    [Switch][] to s:data, [consume][], and [exit][]
*   ‚Ü™ **[Whitespace][]**

    [Consume][]
*   ‚Ü™ **Anything else**

    [Crash][] `'after self-closing slash'`

### Expression state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in attribute value expression'`
*   ‚Ü™ **c:{**

    Increment `size` by `1` and [consume][]
*   ‚Ü™ **c:}**

    If `size` is:

    *   ‚Ü™ **`1`**

        [Switch][] to s:data, unset `size`, [consume][], and [exit][]
    *   ‚Ü™ **Anything else**

        Decrement `size` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Text state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in element'`
*   ‚Ü™ **c:<**\
    ‚Ü™ **c:{**

    [Switch][] to s:data and [exit][]
*   ‚Ü™ **c:`**

    [Switch][] to s:accent-quoted-open, let `sizeOpen` be `1`, and [consume][]
*   ‚Ü™ **c:~**

    [Switch][] to s:tilde-quoted-open, let `sizeOpen` be `1`, and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Accent quoted open state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in code'`
*   ‚Ü™ **c:`**

    Increment `sizeOpen` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    [Switch][] to s:accent-quoted and [consume][]

### Accent quoted state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in code'`
*   ‚Ü™ **c:`**

    [Switch][] to s:accent-quoted-close, let `size` be `1`, and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Accent quoted close state

*   ‚Ü™ **c:`**

    Increment `sizeOpen` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    If `size` is:

    *   ‚Ü™ **`sizeOpen`**

        [Switch][] to s:text, unset `sizeOpen`, and unset `size`
    *   ‚Ü™ **Anything else**

        [Switch][] to s:accent-quoted and unset `size`

### Tilde quoted open state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in code'`
*   ‚Ü™ **c:~**

    Increment `sizeOpen` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    [Switch][] to s:tilde-quoted and [consume][]

### Tilde quoted state

*   ‚Ü™ **[c:EOF][]**

    [Crash][] `'in code'`
*   ‚Ü™ **c:~**

    [Switch][] to s:tilde-quoted-close, let `size` be `1`, and [consume][]
*   ‚Ü™ **Anything else**

    [Consume][]

### Tilde quoted close state

*   ‚Ü™ **c:~**

    Increment `sizeOpen` by `1` and [consume][]
*   ‚Ü™ **Anything else**

    If `size` is:

    *   ‚Ü™ **`sizeOpen`**

        [Switch][] to s:text, unset `sizeOpen`, and unset `size`
    *   ‚Ü™ **Anything else**

        [Switch][] to s:tilde-quoted and unset `size`

## Adapter

The [MDX adapter](#) handles tokens from the [MDX state machine], which has
further effects, such as validating whether they are conforming and figuring out
when parsing is done.

Adapters are defined to handle a token either when a token [enter][]s right
before it‚Äôs pushed to the stack, or when a token [exit][]s right after it‚Äôs
popped off the stack.

The adapters does not define how to construct a syntax tree, but does provide
the essentials for that.
Constructing syntax trees, whether abstract or concrete, is intentionally
undefined.

### Enter `'tag'` adapter

1.  Let `currentTag` be a new object
1.  Let `name` of `currentTag` be `null`
1.  Let `close` of `currentTag` be `false`
1.  Let `selfClosing` of `currentTag` be `false`

### Enter `'closingSlash'` adapter

If there is no [current element][], [crash][] `'before name'` (**note**: a
closing tag with no open elements)

### Enter `'attributeExpression'` adapter

If `close` of `currentTag` is `true`, [crash][] `'on closing tag after name'`
(**note**: a closing tag with an attribute)

### Enter `'attributeName'` adapter

If `close` of `currentTag` is `true`, [crash][] `'on closing tag after name'`
(**note**: a closing tag with an attribute)

### Enter `'selfClosingSlash'` adapter

If `close` of `currentTag` is `true`, [crash][] `'on closing tag before tag
end'` (**note**: a self-closing closing tag)

### Exit `'closingSlash'` adapter

Let `close` of `currentTag` be `true`

### Exit `'primaryName'` adapter

Let `name` of `currentTag` be the [value][] of [current token][]

### Exit `'memberName'` adapter

Append c:. and the [value][] of [current token][] to `name` of `currentTag`

### Exit `'localName'` adapter

Append c:: and the [value][] of [current token][] to `name` of `currentTag`

### Exit `'name'` adapter

If `close` of `currentTag` is `true` and `name` of `currentTag` is not the same
as `name` of [current element][], [crash][] `'on closing tag after name'`
(**note**: mismatched tags)

### Exit `'attributeName'` adapter

1.  Let `currentAttribute` be a new object
1.  Let `name` of `currentAttribute` be the [value][] of [current token][]
1.  Let `value` of `currentAttribute` be `null`

### Exit `'attributeLocalName'` adapter

Append c:: and the [value][] of [current token][] to `name` of
`currentAttribute`

### Exit `'attributeValue'` adapter

Let `value` of `currentAttribute` be the [decode][]d [value][], excluding its
first and last characters, of [current token][]

### Exit `'attributeValueExpression'` adapter

Let `value` of `currentAttribute` be the [dedent][]ed [value][], excluding its
first and last characters, of [current token][]

### Exit `'attributeExpression'` adapter

1.  Let `currentAttribute` be a new object
1.  Let `type` of `currentAttribute` be `'mdxAttributeExpression'`
1.  Let `value` of `currentAttribute` be the [dedent][]ed [value][], excluding
    its first and last characters, of [current token][]

### Exit `'selfClosingSlash'` adapter

Let `selfClosing` of `currentTag` be `true`

### Exit `'tag'` adapter

> **Note**: if there is no [current element][], the [input character][] is the
> start of the element‚Äôs content.
> If `close` of `currentTag` is `true`, and there is a single value in
> the [element stack][], the first character of the token is the end of the
> element‚Äôs content.
> The content should be parsed further by the host parser to find nested MDX
> constructs.

1.  If `close` of `currentTag` is `true`, pop the [current element] from the
    [element stack][]
1.  Otherwise, if `selfClosing` of `currentTag` is `false`, push `currentTag` to
    the [element stack][]

Finally, if there is no [current element][], [switch][] to either
s:after-mdx-block or s:after-mdx-span, based on whether flow or text is parsed.

### Exit `'expression'` adapter

> **Note**: if there is no [current element][], the first character after the
> start of the token is the start of the expression‚Äôs content, and the last
> character before the end of the token is the end of the expression‚Äôs content.
> The content could be parsed by the host parser.

If there is no [current element][], [switch][] to either s:after-mdx-block or
s:after-mdx-span, based on whether flow or text is parsed.

## Appendix

### Syntax

The syntax of MDX is described in [W3C Backus‚ÄìNaur form][w3c-bnf] with the
following additions:

1.  **`A - B`** ‚Äî matches any string that matches `A` but does not match `B`.
2.  **`'string'`** ‚Äî same as **`"string"`** but with single quotes.
3.  **`BREAK`** ‚Äî lookahead match for a block break opportunity (either
    [c:EOF][], c:LF, or c:CR)

The syntax of MDX is defined as follows, however, do note that interleaving
(mixing) of Markdown and MDX is defined elsewhere.

<!--syntax-->

### Deviations from Markdown

MDX adds constructs to Markdown but also prohibits certain normal Markdown
constructs.

#### HTML

Whether block or inline, HTML in Markdown is not supported.

Character data, processing instructions, declarations, and comments are not
supported at all.
Instead of HTML elements, use JSX elements.

Incorrect:

```markdown
# Hello, <span style=color:red>world</span>!
<!--To do: add message-->
<img>
```

Correct:

```markdown
# Hello, <span style='color:red'>world</span>!
<img />
```

#### Indented code

Indentation to create code blocks is not supported.
Instead, use fenced code blocks.

The reason for this change is so that elements can be indented.

Incorrect:

```markdown
    console.log(1)
```

Correct:

````markdown
```js
console.log(1)
```
````

#### Autolinks

Autolinks are not supported.
Instead, use links or references.

The reason for this change is because whether something is an element (whether
HTML or JSX) or an autolink is ambiguous (Markdown normally treats `<svg:rect>`,
`<xml:lang/>`, or `<svg:circle{...props}>` as links).

Incorrect:

```markdown
See <https://example.com> for more information
```

Correct:

```markdown
See [example.com](https://example.com) for more information.
```

#### Errors

Whereas all Markdown is valid, incorrect MDX will crash.

### Deviations from JSX

MDX removes certain constructs from JSX, because JSX is typically mixed with
JavaScript whereas MDX is usable without it.

#### Comments

JavaScript comments in JSX are not supported.

Incorrect:

```jsx
<hi/*comment!*//>
<hello// comment!
/>
```

Correct:

```jsx
<hi/>
<hello
/>
```

#### Element or fragment attribute values

JSX elements or JSX fragments as attribute values are not supported.

The reason for this change is that it would be confusing whether Markdown would
work.

Incorrect:

```jsx
<welcome name=<>Venus</> />
<welcome name=<span>Pluto</span> />
```

Correct:

```jsx
<welcome name='Mars' />
```

#### c:> and c:} are fine

JSX does not allow c:> or c:} literally in text, they need to be encoded as
character references.
There is no good reason for this (some JSX parsers agree with us and don‚Äôt crash
either).
In Markdown, c:> is used to start a block quote.
Therefore, in MDX, c:> and c:} are fine literally and don‚Äôt need to be encoded.

#### Expressions

JSX allows valid JavaScript inside expressions.
We support *anything* in braces.
Because JSX parses JavaScript, it knows when it sees a c:} whether it means the
end of the expression, or if there is more JavaScript after it.
As we don‚Äôt parse JavaScript, but do want to allow further braces in
expressions, we count opening braces (c:{) and expect just as many closing
braces (c:}) in expressions.

Incorrect:

```jsx
<punctuation
  data={{
    '{': false // Left curly brace
  }}
/>
```

Correct:

```jsx
<punctuation
  data={{
    '{': false, // Left curly brace
    '}': false // Right curly brace
  }}
/>
```

### Common MDX gotchas

Markdown *first* looks for blocks (such as a heading) and only later looks for
spans (such as emphasis) in those blocks.

This becomes a problem typically in the two cases listed below.
However, as MDX has parse errors, parsing will crash, and an error will be
presented.

#### Blank lines in JSX spans

Incorrect:

```markdown
The plot for the movie was, <span>wait for it‚Ä¶

‚Ä¶that she didn‚Äôt die!</span>
```

Correct:

```markdown
The plot for the movie was, <span>wait for it‚Ä¶
‚Ä¶that she didn‚Äôt die!</span>
```

#### c:> seen as block quote

Incorrect:

```markdown
Here‚Äôs a cute photo of my cat: <Image
  alt='Photo of Lilo sitting in a tiny box'
  src='lilo.png'
  /
>
```

Correct:

```markdown
Here‚Äôs a cute photo of my cat: <Image alt='Photo of Lilo sitting in a tiny box' src='lilo.png' />
```

Or as a block (c:> is fine in JSX blocks):

```markdown
Here‚Äôs a cute photo of my cat:

<Image
  alt='Photo of Lilo sitting in a tiny box'
  src='lilo.png'
  /
>
```

## References

*   **\[Markdown]**:
    [CommonMark][].
    J. MacFarlane, et al.
*   **\[HTML]**:
    [HTML standard][html].
    A. van Kesteren, et al.
    WHATWG.
*   **\[JavaScript]**:
    [ECMAScript language specification][javascript].
    Ecma International.
*   **\[JSON]**:
    [The JavaScript Object Notation (JSON) Data Interchange Format][json].
    T. Bray.
    IETF.
*   **\[UNICODE]**:
    [The Unicode standard][unicode].
    Unicode Consortium.

## Acknowledgments

Thanks to Gatsby, Inc. for funding the work to define MDX further.

## License

Copyright ¬© 2020 Titus Wormer.
This work is licensed under a
[Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/).

<!--Definitions-->

[html]: https://html.spec.whatwg.org/multipage/

[javascript]: https://tc39.es/ecma262/

[jsx]: https://facebook.github.io/jsx/

[json]: https://tools.ietf.org/html/rfc7159

[commonmark]: https://commonmark.org

[unicode]: https://www.unicode.org/versions/

[confusing]: https://twitter.com/gruber/status/1246489863932821512

[es-whitespace]: https://tc39.es/ecma262/#prod-WhiteSpace

[es-identifier-start]: https://tc39.es/ecma262/#prod-IdentifierStart

[es-identifier-part]: https://tc39.es/ecma262/#prod-IdentifierPart

[mdx-rauchg]: https://spectrum.chat/frontend/general/mdx-proposal~1021be59-2738-4511-aceb-c66921050b9a

[mdx-jamesknelson]: https://github.com/frontarm/mdx-util/tree/0f5f6d62bac4b83edc4bc3890dde3011079fa318

[mdx-johno]: https://github.com/mdx-js/mdx/tree/a96ede2c104084ae21efa8bd95319011e558ec9d

[md]: https://daringfireball.net/2004/03/introducing_markdown

[rauchg]: https://github.com/rauchg

[jamesknelson]: https://github.com/jamesknelson

[johno]: https://github.com/johno

[timneutkens]: https://github.com/timneutkens

[jxnblk]: https://github.com/jxnblk

[ticky]: https://github.com/ticky

[gruber]: https://github.com/gruber

[jgm]: https://github.com/jgm

[sebmarkbage]: https://github.com/sebmarkbage

[w3c-bnf]: https://www.w3.org/Notation.html

[mdxjs]: https://mdxjs.com

[micromark]: https://github.com/micromark/micromark

[cmsm]: https://github.com/micromark/common-markup-state-machine
